var http = require("http");
var config = require("./config");

function decrypt(payload) {

    var appskey = request.parameters.appsKey ? request.parameters.appsKey : config.appsKey;
    var nwkskey = request.parameters.nwksKey ? request.parameters.nwksKey : config.nwksKey
    var requestParams = {
        url: config.url,
        params: {
            appskey: appskey,
            nwkskey: nwkskey,
            data: payload
        }
    };

    var resp = http.request(requestParams); 
    if (resp.status > "200") {

        throw {

            errorCode: resp.status,
            errorDetail: resp.body
        };
    }

    var errorIndex = resp.body.indexOf("Error");
    if (errorIndex > -1) {

        var error = resp.body.substring(errorIndex, resp.body.indexOf("</pre>"));
        throw {
            errorCode: 400,
            errorDetail: error
        };
    }

    var answerStartIndex = resp.body.indexOf("(from packet, encrypted)");
    var answerEndIndex = resp.body.indexOf(" (decrypted");
    var sub = resp.body.substring(answerStartIndex, answerEndIndex);
    answerStartIndex = sub.indexOf("=") + 1; 
    sub = sub.substring(answerStartIndex).trim();
    return hexStringToByte(sub);
}

function hexStringToByte(str) {
    if (!str) {
        return new Array();
    }

    var a = [];
    for (var i = 0, len = str.length; i < len; i+=2) {
        a.push(parseInt(str.substr(i,2),16));
    }

    return a;
}

function bin2string(array){
    var result = "";
    for(var i = 0; i < array.length; ++i){
        result+= (String.fromCharCode(array[i]));
    }
    return result;
}