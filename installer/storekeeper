/**
 * scriptr's free tiers applies limits on your account, such as notably the max number of entries in your data store 
 * since this demo application generates a lot of data that end up in your data store, and to avoid reaching a limit
 * that would prevent you from saving more data in your account, this script will be scheduled to automatically clean
 * up the older documents that were generated by the application.
 * if you notice that, for some reason, the script is not scheduled (there should be a small clock icon near its name 
 * in the tree view on the left, please schedule it to execute every 5 min by clicking on Schedule > + Add Schedule >
 * click on Advanced and paste the following: 0/5 * * * ?  then click on the check sign)
 */

var document = require("document");
var log = require("log");

const MIN_DOCUMENTS = 75;
const MAX_DELETE_CHUNK = 50; // any other custom value should be less than 50

// start logger
log.setLevel("info");

var errors = 0;

// count how many documents generated by the application are currently in the store
var queryParams = {
	
    query: 'type = "stm32l072b"',
    fields: 'key',
    sort:'creationDate<date:ASC>',
    resultsPerPage: MAX_DELETE_CHUNK,
    count: true
};

var resp = document.query(queryParams);
if (resp.metadata.status == "failure") {
    
    log.error("Counting saved documents failed:\n" + JSON.stringify(resp));
    return resp;
}

// Do not delete if document count is <= min documents to keep some data
var maxToDelete = 0;
if (resp.result.count > MIN_DOCUMENTS) {
    
    log.info("storekeeper found " +   resp.result.count + " documents");
    var docList = resp.result.documents;
    var diff = resp.result.count - MIN_DOCUMENTS;
    maxToDelete = diff < MAX_DELETE_CHUNK ? diff : MAX_DELETE_CHUNK;
    log.info("storekeeper will delete " +   maxToDelete + " documents");
    for (var i = 0; i < maxToDelete; i++) {
        
        resp = document.delete(docList[i].key);
        if (resp.metadata.status == "failure") {
            
            log.error("storekeeper could not delete " + docList[i].key + ":\n" + JSON.stringify(resp));
            errors++;
        }
    }
    
    return "storekeeper done cleaning " + maxToDelete + " document with " + errors + " errors";
}

return "storekeeper has nothing to do";
